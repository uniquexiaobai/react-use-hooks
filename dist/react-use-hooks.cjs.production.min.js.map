{"version":3,"file":"react-use-hooks.cjs.production.min.js","sources":["../src/index.tsx","../src/use-boolean.tsx","../src/use-copy-clipboard.tsx","../src/use-in-viewport.tsx","../src/utils.ts"],"sourcesContent":["import * as React from 'react';\n\nexport { default as useInViewport } from './use-in-viewport';\nexport { default as useCopyClipboard } from './use-copy-clipboard';\nexport { default as useBoolean } from './use-boolean';\n\nexport const Hello = () => {\n  return <div>hello react hooks</div>;\n};\n","import { useState } from 'react';\n\nconst useBoolean = (initialValue: boolean): [boolean, (x?: boolean) => void] => {\n  const [value, setValue] = useState<boolean>(initialValue);\n\n  const toggle = (forceValue?: boolean) => {\n    if (typeof forceValue === 'boolean') {\n      setValue(forceValue);\n    } else {\n      setValue(!value);\n    }\n  }\n\n  return [value, toggle];\n};\n\nexport default useBoolean;","import { useState } from 'react';\n\nconst copyPolyfill = (text: string) => {\n  const textArea = document.createElement('textarea');\n\n  textArea.style.position = 'absolute';\n  textArea.style.top = '-9999px';\n  textArea.style.left = '-9999px';\n  textArea.value = text;\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    return document.execCommand('copy');\n  } catch (err) {\n    console.log(err);\n    return false;\n  } finally {\n    document.body.removeChild(textArea);\n  }\n};\n\nconst copy = (text: string) => {\n  document.addEventListener('copy', function onCopy(e: any) {\n    e.clipboardData.setData('text/plain', text);\n    e.preventDefault();\n    document.removeEventListener('copy', onCopy);\n  });\n\n  let isCopied;\n\n  try {\n    isCopied = document.execCommand('copy');\n  } catch (err) {\n    isCopied = false;\n    console.log(err);\n  }\n\n  if (!isCopied) {\n    isCopied = copyPolyfill(text);\n  }\n\n  return isCopied;\n};\n\n// TODO: Async Clipboard API\n// https://developers.google.com/web/updates/2018/03/clipboardapi\nconst useCopyClipboard = (): [boolean, (x: string) => void] => {\n  const [isCopied, setCopied] = useState<boolean>(false);\n\n  return [\n    isCopied,\n    text => {\n      const didCopy = copy(text);\n      setCopied(didCopy);\n    },\n  ];\n};\n\nexport default useCopyClipboard;\n","import { useState, useEffect, useRef } from 'react';\nimport { throttle } from './utils';\n\ninterface Options {\n  root?: HTMLElement;\n  rootMargin?: string;\n  threshold?: number | number[];\n}\n\nconst inViewportPolyfill = (\n  element: HTMLElement,\n  callback: (x: any) => void,\n  options: Options\n) => {\n  const { root = document.documentElement } = options;\n  const viewWidth = root.clientWidth;\n  const viewHeight = root.clientHeight;\n\n  const update = throttle(() => {\n    const {\n      width,\n      height,\n      top,\n      bottom,\n      left,\n      right,\n    } = element.getBoundingClientRect();\n\n    callback(\n      width &&\n        height &&\n        top < viewHeight &&\n        bottom > 0 &&\n        left < viewWidth &&\n        right > 0\n    );\n  }, 250);\n\n  document.addEventListener('scroll', update);\n  return () => document.removeEventListener('scroll', update);\n};\n\nconst useInViewport = (options: Options = {}) => {\n  const [inViewport, setInViewport] = useState<boolean>(false);\n  const ref = useRef<HTMLElement>();\n  const { root, rootMargin = '0px', threshold = [0] } = options;\n\n  useEffect(() => {\n    let unobserve = () => {};\n\n    if (window.IntersectionObserver) {\n      const observer = new window.IntersectionObserver(\n        ([entry]) => {\n          setInViewport(entry.isIntersecting);\n        },\n        { root, rootMargin, threshold }\n      );\n\n      if (ref.current) {\n        observer.observe(ref.current);\n        unobserve = () => observer.unobserve(ref.current!);\n      }\n    } else {\n      if (ref.current) {\n        unobserve = inViewportPolyfill(ref.current, setInViewport, options);\n      }\n    }\n\n    return unobserve;\n  }, []);\n\n  return [inViewport, ref];\n};\n\nexport default useInViewport;\n","export const debounce = (func: () => any, wait: number) => {\n  let timer: number;\n\n  return (...args: []) => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = window.setTimeout(() => {\n      func(...args);\n    }, wait);\n  };\n};\n\nexport const throttle = (func: () => any, wait: number) => {\n  let last: number, timer: number;\n\n  return (...args: []) => {\n    const now = Date.now();\n\n    if (last && now - last < wait) {\n      clearTimeout(timer);\n\n      timer = window.setTimeout(() => {\n        last = now;\n        func(...args);\n      }, wait);\n    } else {\n      last = now;\n      func(...args);\n    }\n  };\n};\n"],"names":["React","initialValue","useState","value","setValue","forceValue","setCopied","text","didCopy","isCopied","document","addEventListener","onCopy","e","clipboardData","setData","preventDefault","removeEventListener","execCommand","err","console","log","textArea","createElement","style","position","top","left","body","appendChild","focus","select","removeChild","copyPolyfill","copy","options","inViewport","setInViewport","ref","useRef","root","rootMargin","threshold","useEffect","unobserve","window","IntersectionObserver","observer","isIntersecting","current","observe","element","callback","func","last","timer","documentElement","viewWidth","clientWidth","viewHeight","clientHeight","update","getBoundingClientRect","width","height","bottom","right","args","now","Date","clearTimeout","setTimeout","inViewportPolyfill"],"mappings":"yGAMqB,kBACZA,oECLU,SAACC,SACQC,WAAkBD,GAArCE,OAAOC,aAUP,CAACD,EARO,SAACE,GAEZD,EADwB,kBAAfC,EACAA,GAECF,+BCwCS,iBACOD,YAAkB,GAA/BI,aAEV,MAEL,SAAAC,OACQC,EA/BC,SAACD,OAORE,EANJC,SAASC,iBAAiB,QAAQ,SAASC,EAAOC,GAChDA,EAAEC,cAAcC,QAAQ,aAAcR,GACtCM,EAAEG,iBACFN,SAASO,oBAAoB,OAAQL,UAMrCH,EAAWC,SAASQ,YAAY,QAChC,MAAOC,GACPV,GAAW,EACXW,QAAQC,IAAIF,UAGTV,IACHA,EAvCiB,SAACF,OACde,EAAWZ,SAASa,cAAc,YAExCD,EAASE,MAAMC,SAAW,WAC1BH,EAASE,MAAME,IAAM,UACrBJ,EAASE,MAAMG,KAAO,UACtBL,EAASnB,MAAQI,EAEjBG,SAASkB,KAAKC,YAAYP,GAC1BA,EAASQ,QACTR,EAASS,oBAGArB,SAASQ,YAAY,QAC5B,MAAOC,UACPC,QAAQC,IAAIF,IACL,UAEPT,SAASkB,KAAKI,YAAYV,IAqBfW,CAAa1B,IAGnBE,EAWayB,CAAK3B,GACrBD,EAAUE,4BCdM,SAAC2B,YAAAA,IAAAA,EAAmB,UACJjC,YAAkB,GAA/CkC,OAAYC,OACbC,EAAMC,WACJC,EAA8CL,EAA9CK,OAA8CL,EAAxCM,WAAAA,aAAa,UAA2BN,EAApBO,UAAAA,aAAY,CAAC,YAE/CC,aAAU,eACJC,EAAY,gBAEZC,OAAOC,qBAAsB,KACzBC,EAAW,IAAIF,OAAOC,sBAC1B,YACET,OAAoBW,kBAEtB,CAAER,KAAAA,EAAMC,WAAAA,EAAYC,UAAAA,IAGlBJ,EAAIW,UACNF,EAASG,QAAQZ,EAAIW,SACrBL,EAAY,kBAAMG,EAASH,UAAUN,EAAIW,gBAGvCX,EAAIW,UACNL,EAvDmB,SACzBO,EACAC,EACAjB,OCEuBkB,EACnBC,EAAcC,IDD0BpB,EAApCK,KAAAA,aAAO9B,SAAS8C,kBAClBC,EAAYjB,EAAKkB,YACjBC,EAAanB,EAAKoB,aAElBC,GCJiBR,EDIC,iBAQlBF,EAAQW,wBAEZV,IAREW,SACAC,UACAtC,IASQiC,KARRM,OASW,KARXtC,KASS8B,KARTS,MASU,ICjBP,sCAAIC,2BAAAA,sBACHC,EAAMC,KAAKD,MAEbd,GAAQc,EAAMd,EDgBjB,KCfCgB,aAAaf,GAEbA,EAAQV,OAAO0B,YAAW,WACxBjB,EAAOc,EACPf,eAAQc,KDWX,OCRCb,EAAOc,EACPf,eAAQc,aDSZzD,SAASC,iBAAiB,SAAUkD,GAC7B,kBAAMnD,SAASO,oBAAoB,SAAU4C,IAyBlCW,CAAmBlC,EAAIW,QAASZ,EAAeF,WAIxDS,IACN,IAEI,CAACR,EAAYE"}